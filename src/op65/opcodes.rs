/// 6502 OpCode Definitions
pub type OpCode = u8;

// 6502 OP Codes
// ref:
//  - https://www.masswerk.at/6502/6502_instruction_set.html
//  - http://www.6502.org/tutorials/6502opcodes.html
pub const ADC_ABS: OpCode = 0x6D;
pub const ADC_ABS_X: OpCode = 0x7D;
pub const ADC_ABS_Y: OpCode = 0x79;
pub const ADC_IMM: OpCode = 0x69;
pub const ADC_IND_Y: OpCode = 0x71;
pub const ADC_X_IND: OpCode = 0x61;
pub const ADC_ZP: OpCode = 0x65;
pub const ADC_ZP_X: OpCode = 0x75;
pub const AND_ABS: OpCode = 0x2D;
pub const AND_ABS_X: OpCode = 0x3D;
pub const AND_ABS_Y: OpCode = 0x39;
pub const AND_IMM: OpCode = 0x29;
pub const AND_IND_Y: OpCode = 0x31;
pub const AND_X_IND: OpCode = 0x21;
pub const AND_ZP: OpCode = 0x25;
pub const AND_ZP_X: OpCode = 0x35;
pub const ASL_A: OpCode = 0x0A;
pub const ASL_ABS: OpCode = 0x0E;
pub const ASL_ABS_X: OpCode = 0x1E;
pub const ASL_ZP: OpCode = 0x06;
pub const ASL_ZP_X: OpCode = 0x16;
pub const BCC_REL: OpCode = 0x90;
pub const BCS_REL: OpCode = 0xB0;
pub const BEQ_REL: OpCode = 0xF0;
pub const BIT_ABS: OpCode = 0x2C;
pub const BIT_ZP: OpCode = 0x24;
pub const BMI_REL: OpCode = 0x30;
pub const BNE_REL: OpCode = 0xD0;
pub const BPL_REL: OpCode = 0x10;
pub const BRK: OpCode = 0x00;
pub const BVC_REL: OpCode = 0x50;
pub const BVS_REL: OpCode = 0x70;
pub const CLC: OpCode = 0x18;
pub const CLD: OpCode = 0xD8;
pub const CLI: OpCode = 0x58;
pub const CLV: OpCode = 0xB8;
pub const CMP_ABS: OpCode = 0xCD;
pub const CMP_ABS_X: OpCode = 0xDD;
pub const CMP_ABS_Y: OpCode = 0xD9;
pub const CMP_IMM: OpCode = 0xC9;
pub const CMP_IND_Y: OpCode = 0xD1;
pub const CMP_X_IND: OpCode = 0xC1;
pub const CMP_ZP: OpCode = 0xC5;
pub const CMP_ZP_X: OpCode = 0xD5;
pub const CPX_ABS: OpCode = 0xEC;
pub const CPX_IMM: OpCode = 0xE0;
pub const CPX_ZP: OpCode = 0xE4;
pub const CPY_ABS: OpCode = 0xCC;
pub const CPY_IMM: OpCode = 0xC0;
pub const CPY_ZP: OpCode = 0xC4;
pub const DEC_ABS: OpCode = 0xCE;
pub const DEC_ABS_X: OpCode = 0xDE;
pub const DEC_ZP: OpCode = 0xC6;
pub const DEC_ZP_X: OpCode = 0xD6;
pub const DEX: OpCode = 0xCA;
pub const DEY: OpCode = 0x88;
pub const EOR_ABS: OpCode = 0x4D;
pub const EOR_ABS_X: OpCode = 0x5D;
pub const EOR_ABS_Y: OpCode = 0x59;
pub const EOR_IMM: OpCode = 0x49;
pub const EOR_IND_Y: OpCode = 0x51;
pub const EOR_X_IND: OpCode = 0x41;
pub const EOR_ZP: OpCode = 0x45;
pub const EOR_ZP_X: OpCode = 0x55;
pub const INC_ABS: OpCode = 0xEE;
pub const INC_ABS_X: OpCode = 0xFE;
pub const INC_ZP: OpCode = 0xE6;
pub const INC_ZP_X: OpCode = 0xF6;
pub const INX: OpCode = 0xE8;
pub const INY: OpCode = 0xC8;
pub const JMP_ABS: OpCode = 0x4C;
pub const JMP_IND: OpCode = 0x6C;
pub const JSR_ABS: OpCode = 0x20;
pub const LDA_ABS: OpCode = 0xAD;
pub const LDA_ABS_X: OpCode = 0xBD;
pub const LDA_ABS_Y: OpCode = 0xB9;
pub const LDA_IMM: OpCode = 0xA9;
pub const LDA_IND_Y: OpCode = 0xB1;
pub const LDA_X_IND: OpCode = 0xA1;
pub const LDA_ZP: OpCode = 0xA5;
pub const LDA_ZP_X: OpCode = 0xB5;
pub const LDX_ABS: OpCode = 0xAE;
pub const LDX_ABS_Y: OpCode = 0xBE;
pub const LDX_IMM: OpCode = 0xA2;
pub const LDX_ZP: OpCode = 0xA6;
pub const LDX_ZP_Y: OpCode = 0xB6;
pub const LDY_ABS: OpCode = 0xAC;
pub const LDY_ABS_X: OpCode = 0xBC;
pub const LDY_IMM: OpCode = 0xA0;
pub const LDY_ZP: OpCode = 0xA4;
pub const LDY_ZP_X: OpCode = 0xB4;
pub const LSR_A: OpCode = 0x4A;
pub const LSR_ABS: OpCode = 0x4E;
pub const LSR_ABS_X: OpCode = 0x5E;
pub const LSR_ZP: OpCode = 0x46;
pub const LSR_ZP_X: OpCode = 0x56;
pub const NOP: OpCode = 0xEA;
pub const ORA_ABS: OpCode = 0x0D;
pub const ORA_ABS_X: OpCode = 0x1D;
pub const ORA_ABS_Y: OpCode = 0x19;
pub const ORA_IMM: OpCode = 0x09;
pub const ORA_IND_Y: OpCode = 0x11;
pub const ORA_X_IND: OpCode = 0x01;
pub const ORA_ZP: OpCode = 0x05;
pub const ORA_ZP_X: OpCode = 0x15;
pub const PHA: OpCode = 0x48;
pub const PHP: OpCode = 0x08;
pub const PLA: OpCode = 0x68;
pub const PLP: OpCode = 0x28;
pub const ROL_A: OpCode = 0x2A;
pub const ROL_ABS: OpCode = 0x2E;
pub const ROL_ABS_X: OpCode = 0x3E;
pub const ROL_ZP: OpCode = 0x26;
pub const ROL_ZP_X: OpCode = 0x36;
pub const ROR_A: OpCode = 0x6A;
pub const ROR_ABS: OpCode = 0x6E;
pub const ROR_ABS_X: OpCode = 0x7E;
pub const ROR_ZP: OpCode = 0x66;
pub const ROR_ZP_X: OpCode = 0x76;
pub const RTI: OpCode = 0x40;
pub const RTS: OpCode = 0x60;
pub const SBC_ABS: OpCode = 0xED;
pub const SBC_ABS_X: OpCode = 0xFD;
pub const SBC_ABS_Y: OpCode = 0xF9;
pub const SBC_IMM: OpCode = 0xE9;
pub const SBC_IND_Y: OpCode = 0xF1;
pub const SBC_X_IND: OpCode = 0xE1;
pub const SBC_ZP: OpCode = 0xE5;
pub const SBC_ZP_X: OpCode = 0xF5;
pub const SEC: OpCode = 0x38;
pub const SED: OpCode = 0xF8;
pub const SEI: OpCode = 0x78;
pub const STA_ABS: OpCode = 0x8D;
pub const STA_ABS_X: OpCode = 0x9D;
pub const STA_ABS_Y: OpCode = 0x99;
pub const STA_IND_Y: OpCode = 0x91;
pub const STA_X_IND: OpCode = 0x81;
pub const STA_ZP: OpCode = 0x85;
pub const STA_ZP_X: OpCode = 0x95;
pub const STX_ABS: OpCode = 0x8E;
pub const STX_ZP: OpCode = 0x86;
pub const STX_ZP_Y: OpCode = 0x96;
pub const STY_ABS: OpCode = 0x8C;
pub const STY_ZP: OpCode = 0x84;
pub const STY_ZP_X: OpCode = 0x94;
pub const TAX: OpCode = 0xAA;
pub const TAY: OpCode = 0xA8;
pub const TSX: OpCode = 0xBA;
pub const TXA: OpCode = 0x8A;
pub const TXS: OpCode = 0x9A;
pub const TYA: OpCode = 0x98;

// NES Unofficial Opcodes
// ref:
//  - https://www.nesdev.org/wiki/CPU_unofficial_opcodes
//  - https://www.nesdev.org/wiki/Programming_with_unofficial_opcodes
//  - https://www.oxyron.de/html/opcodes02.html
pub const ALR_IMM: OpCode = 0x4B;
pub const ANC_2B_IMM: OpCode = 0x2B;
pub const ANC_IMM: OpCode = 0x0B;
pub const ARR_IMM: OpCode = 0x6B;
pub const AXS_IMM: OpCode = 0xCB;
pub const DCP_ABS: OpCode = 0xCF;
pub const DCP_ABS_X: OpCode = 0xDF;
pub const DCP_ABS_Y: OpCode = 0xDB;
pub const DCP_IND_Y: OpCode = 0xD3;
pub const DCP_X_IND: OpCode = 0xC3;
pub const DCP_ZP: OpCode = 0xC7;
pub const DCP_ZP_X: OpCode = 0xD7;
pub const IGN_04_ZP: OpCode = 0x04;
pub const IGN_14_ZP_X: OpCode = 0x14;
pub const IGN_1C_ABS_X: OpCode = 0x1C;
pub const IGN_34_ZP_X: OpCode = 0x34;
pub const IGN_3C_ABS_X: OpCode = 0x3C;
pub const IGN_44_ZP: OpCode = 0x44;
pub const IGN_54_ZP_X: OpCode = 0x54;
pub const IGN_5C_ABS_X: OpCode = 0x5C;
pub const IGN_64_ZP: OpCode = 0x64;
pub const IGN_74_ZP_X: OpCode = 0x74;
pub const IGN_7C_ABS_X: OpCode = 0x7C;
pub const IGN_ABS: OpCode = 0x0C;
pub const IGN_D4_ZP_X: OpCode = 0xD4;
pub const IGN_DC_ABS_X: OpCode = 0xDC;
pub const IGN_F4_ZP_X: OpCode = 0xF4;
pub const IGN_FC_ABS_X: OpCode = 0xFC;
pub const ISC_ABS: OpCode = 0xEF;
pub const ISC_ABS_X: OpCode = 0xFF;
pub const ISC_ABS_Y: OpCode = 0xFB;
pub const ISC_IND_Y: OpCode = 0xF3;
pub const ISC_X_IND: OpCode = 0xE3;
pub const ISC_ZP: OpCode = 0xE7;
pub const ISC_ZP_X: OpCode = 0xF7;
pub const LAS_ABS_Y: OpCode = 0xBB;
pub const LAX_ABS: OpCode = 0xAF;
pub const LAX_ABS_Y: OpCode = 0xBF;
pub const LAX_IND_Y: OpCode = 0xB3;
pub const LAX_X_IND: OpCode = 0xA3;
pub const LAX_ZP: OpCode = 0xA7;
pub const LAX_ZP_Y: OpCode = 0xB7;
pub const LXA_IMM: OpCode = 0xAB;
pub const NOP_1A: OpCode = 0x1A;
pub const NOP_3A: OpCode = 0x3A;
pub const NOP_5A: OpCode = 0x5A;
pub const NOP_7A: OpCode = 0x7A;
pub const NOP_DA: OpCode = 0xDA;
pub const NOP_FA: OpCode = 0xFA;
pub const RLA_ABS: OpCode = 0x2F;
pub const RLA_ABS_X: OpCode = 0x3F;
pub const RLA_ABS_Y: OpCode = 0x3B;
pub const RLA_IND_Y: OpCode = 0x33;
pub const RLA_X_IND: OpCode = 0x23;
pub const RLA_ZP: OpCode = 0x27;
pub const RLA_ZP_X: OpCode = 0x37;
pub const RRA_ABS: OpCode = 0x6F;
pub const RRA_ABS_X: OpCode = 0x7F;
pub const RRA_ABS_Y: OpCode = 0x7B;
pub const RRA_IND_Y: OpCode = 0x73;
pub const RRA_X_IND: OpCode = 0x63;
pub const RRA_ZP: OpCode = 0x67;
pub const RRA_ZP_X: OpCode = 0x77;
pub const SAX_ABS: OpCode = 0x8F;
pub const SAX_X_IND: OpCode = 0x83;
pub const SAX_ZP: OpCode = 0x87;
pub const SAX_ZP_Y: OpCode = 0x97;
pub const SBC_EB_IMM: OpCode = 0xEB;
pub const SHA_ABS_Y: OpCode = 0x9F;
pub const SHA_IND_Y: OpCode = 0x93;
pub const SHX_ABS_Y: OpCode = 0x9E;
pub const SHY_ABS_X: OpCode = 0x9C;
pub const SKB_80_IMM: OpCode = 0x80;
pub const SKB_82_IMM: OpCode = 0x82;
pub const SKB_89_IMM: OpCode = 0x89;
pub const SKB_C2_IMM: OpCode = 0xC2;
pub const SKB_E2_IMM: OpCode = 0xE2;
pub const SLO_ABS: OpCode = 0x0F;
pub const SLO_ABS_X: OpCode = 0x1F;
pub const SLO_ABS_Y: OpCode = 0x1B;
pub const SLO_IND_Y: OpCode = 0x13;
pub const SLO_X_IND: OpCode = 0x03;
pub const SLO_ZP: OpCode = 0x07;
pub const SLO_ZP_X: OpCode = 0x17;
pub const SRE_ABS: OpCode = 0x4F;
pub const SRE_ABS_X: OpCode = 0x5F;
pub const SRE_ABS_Y: OpCode = 0x5B;
pub const SRE_IND_Y: OpCode = 0x53;
pub const SRE_X_IND: OpCode = 0x43;
pub const SRE_ZP: OpCode = 0x47;
pub const SRE_ZP_X: OpCode = 0x57;
pub const TAS_ABS_Y: OpCode = 0x9B;
pub const XAA_IMM: OpCode = 0x8B;

// KIL
pub const KIL: OpCode = 0x02;
pub const KIL_12: OpCode = 0x12;
pub const KIL_22: OpCode = 0x22;
pub const KIL_32: OpCode = 0x32;
pub const KIL_42: OpCode = 0x42;
pub const KIL_52: OpCode = 0x52;
pub const KIL_62: OpCode = 0x62;
pub const KIL_72: OpCode = 0x72;
pub const KIL_92: OpCode = 0x92;
pub const KIL_B2: OpCode = 0xB2;
pub const KIL_D2: OpCode = 0xD2;
pub const KIL_F2: OpCode = 0xF2;
